getwd()
setwd("../developingDataProducts")
getwd()
source("process.R")
source("process.R")
source("process.R")
str(rawData)
rm (rawData)
source("process.R")
df$GAME_DATE<-as.date(df$GAME_DATE)
df$GAME_DATE<-as.Date(df$GAME_DATE)
df$GAME_DATE<-as.Date(df$GAME_DATE,format="%Y-%b-%d")
str(df)
df$DOW<-as.factor(df$GAME_DOW)
str(df)
df<-df[,-DOW]
df<-df[,-df$DOW]
df<-df[,-c("DOW")]
df<-df[,-c(df$DOW)]
str(df)
df<-read.csv("hockey_stage.csv")
df$GAME_DATE<-as.Date(df$GAME_DATE,format="%Y-%b-%d")
df$GAME_DOW<-as.factor(df$GAME_DOW)
str(df)
df$TEAM_ID<-as.factor(df$TEAM_ID)
str(df)
gf_df<-df
gf_df<-gf_df[,-8]
str(gf_df)
ga_df<-df
ga_df<-ga_df[,-7]
str(ga_df)
lm(GOALS_FOR ~ ., data=gf_df)
summary(lm(GOALS_FOR ~ ., data=gf_df))
plot(lm(GOALS_FOR ~ ., data=gf_df))
summary(lm(GOALS_FOR ~ ., data=gf_df))
summary(lm(GOALS_AGAINST ~ ., data=ga_df))
set.seed(1234)
tControl<-trainControl(method = "repeatedcv",number=10,repeats=10)
#run model in parallel
#cl<-makeCluster(detectCores())
#registerDoParallel(cl)
#modelFit<-train(classe ~.,data=trainingData, method="rf", trControl=tControl, verbose=FALSE)
#stopCluster(cl)
modelFitGF<-randomForest(GOALS_AGAINST ~ ., data=ga_df, method="rf", trControl=tControl, verbose=FALSE)
modelFit
install.packages("randomForest")
library(randomForest)
set.seed(1234)
tControl<-trainControl(method = "repeatedcv",number=10,repeats=10)
#run model in parallel
#cl<-makeCluster(detectCores())
#registerDoParallel(cl)
#modelFit<-train(classe ~.,data=trainingData, method="rf", trControl=tControl, verbose=FALSE)
#stopCluster(cl)
modelFitGF<-randomForest(GOALS_AGAINST ~ ., data=ga_df, method="rf", trControl=tControl, verbose=FALSE)
modelFit
modelFitGF
summary(modelFitGF)
sqrt(2.688903)
modelFitGF<-modelFitGA
modelFitGA<-modelFitGF
set.seed(1234)
tControl<-trainControl(method = "repeatedcv",number=10,repeats=10)
#run model in parallel
#cl<-makeCluster(detectCores())
#registerDoParallel(cl)
#modelFit<-train(classe ~.,data=trainingData, method="rf", trControl=tControl, verbose=FALSE)
#stopCluster(cl)
modelFitGF<-randomForest(GOALS_FOR ~ ., data=gf_df, method="rf", trControl=tControl, verbose=FALSE)
modelFitGF
save(modelFitGF,"modelFitGF.bin")
save(modelFitGF,file="modelFitGF.bin")
save(modelFitGA,file="modelFitGA.bin")
sqrt(2.709)
rm(modelFItGA)
rm(modelFitGA)
rm(modelFitGF)
load("modelFitGA.bin")
load("modelFitGF.bin")
str(ga_df)
gf_df2<-gf_df
ga_df2<-ga_df
gf_df2$GOALS_FOR<-as.factor(gf_df2$GOALS_FOR)
ga_df2$GOALS_AGAINST<-as.factor(ga_df2$GOALS_AGAINST)
modelFitGA2<-randomForest(GOALS_AGAINST ~ ., data=ga_df2, method="rf", trControl=tControl, verbose=FALSE)
summary(modelFit2)
summary(modelFitGA2)
modelFit2
modelFitGA2
modelFitGF2<-randomForest(GOALS_FOR ~ ., data=gf_df2, method="rf", trControl=tControl, verbose=FALSE)
modelFitGF2
save(modelFitGA2,file="modelFitGA2.bin")
save(modelFitGF2,file="modelFitGF2.bin")
getwd()
ls
getwd()
setwd("mtcars")
runApp()
library(shiny)
runApp()
runApp()
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('ramnathv/slidify')
devtools::install_github("ramnathv/slidify")
remove.packages('diagest')
remove.packages('digest')
remove.packages('mime')
remove.packages('stringi')
devtools::install_github("ramnathv/slidify")
install.packages("stringi")
install.packages("stringi")
devtools::install_github("ramnathv/slidify")
install.packages("digest")
devtools::install_github("ramnathv/slidify")
library(slidify)
install_github("ramnathv/slidifyLibraries")
devtools::install_github("ramnathv/slidifyLibraries")
library(slidify)
getwd()
setwd("C:/Users/Brian/git/developingDataProducts/mtcars")
setwd("C:/Users/Brian/git/developingDataProducts/slidify")
author("first_deck")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
